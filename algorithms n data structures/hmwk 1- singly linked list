//
//  main.cpp
//  algorithms hmwk 1
//
//  Created by Autumn Tiede on 9/25/23.
//

// 1. Remove the largest and smallest elements from the singly-linked list.
// 2. Insert the number x before the smallest element in the singly-linked list.
// 3. Enter an integer number N. Enter N integers numbers a1, a2, ... aN into a singly-linked list. In the sequence a1, a2, ... aN calculate and output the sum of the positive members and the number of negative members

#include <iostream>
#include <limits>
using namespace std;

// creating node
struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {} // initializing variables
};

class LinkedList {
private:
    Node* head; // points to first node in list

public:
    LinkedList() : head(nullptr) {}
    // empty constructor & head constructor making head automatically = null

    // function to insert new node in list
    void insert(int val) {
        Node* newNode = new Node(val); // making new node
        if (!head) {
            head = newNode; // putting new node at head
            return;
        }

        // finding last node
        Node* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        // put new node at end
        temp->next = newNode;
    }
    
    // function for task 1
    void removeLargestAndSmallest() {
        // check if list empty or < 1
            if (!head || !head->next) {
                std::cout << "The list is empty or has only one element." << std::endl;
                return;
            }

        // initialize data
            int smallestValue = std::numeric_limits<int>::max();
            int largestValue = std::numeric_limits<int>::min();
            Node* smallest = nullptr;
            Node* largest = nullptr;
            Node* smallestPrev = nullptr;
            Node* largestPrev = nullptr;

            Node* current = head;
            Node* previous = nullptr;

        // finding smallest
            while (current) {
                if (current->data < smallestValue) {
                    smallestValue = current->data;
                    smallest = current;
                    smallestPrev = previous;
                }

                // finding biggest
                if (current->data > largestValue) {
                    largestValue = current->data;
                    largest = current;
                    largestPrev = previous;
                }

                previous = current;
                current = current->next;
            }
        
        // moving head if head = smallest or biggest then removing
            if (smallest) {
                if (smallest == head) {
                    head = head->next;
                } else {
                    smallestPrev->next = smallest->next;
                }
                delete smallest;
            }

            if (largest) {
                if (largest == head) {
                    head = head->next;
                } else {
                    largestPrev->next = largest->next;
                }
                delete largest;
            }
        }

    void insertBeforeSmallest(int val) {
        // checks if list is empty
        if (!head) {
            std::cout << "\nList is empty. Cannot insert before smallest element." << std::endl;
            return; // if yes return
        }

        // initializing
        Node* current = head;
        Node* smallestPrev = nullptr;
        Node* smallest = head;

        // Find the smallest element and its previous node
        while (current->next) {
            if (current->next->data < smallest->data) { // checks if smaller
                smallest = current->next;
                smallestPrev = current; // keep track of value before smallest
            }

            current = current->next; // iterating
        }

        // create new node for inputting
        Node* newNode = new Node(val);

        if (smallestPrev == nullptr) {
            // if smallest element = head, insert before the head
            newNode->next = head;
            head = newNode;
        } else {
            // insert new node before the smallest element
            newNode->next = smallestPrev->next;
            smallestPrev->next = newNode;
        }

        
        std::cout << "\nTask 2: modified list after inserting " << val << " before the smallest element:" << std::endl;
        printList(); // prints list
    }
    
    // function for task 3
    void calculateSumAndCount() {
        // check if list empty
            if (!head) {
                std::cout << "The list is empty." << std::endl;
                return;
            }

        // initialize values
            int sumPositive = 0;
            int countNegative = 0;

        // start at head
            Node* current = head;

        // iterate thru data
            while (current) {
                if (current->data > 0) // if value is positive
                    sumPositive += current->data; // add to sum
                else if (current->data < 0) // if value is negative
                    countNegative++; // add to count

                current = current->next;
            }

            std::cout << "\nTask 3: sum of positive members: " << sumPositive << std::endl;
            std::cout << "      number of negative members: " << countNegative << std::endl;
        }

    // function for printing
    void printList() {
        Node* current = head;

        if (current == nullptr) {
            std::cout << "The list is empty." << std::endl;
            return;
        }

        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    // access the list
    LinkedList list;

    // user input for list
    int N;
    std::cout << "Enter the number of elements: ";
    std::cin >> N;
    std::cout << "Enter " << N << " integers:" << std::endl;
    // put given values in list
    for (int i = 0; i < N; i++) {
        int num;
        std::cin >> num;
        list.insert(num);
    }

    // user input for task 2
    int x;
    std::cout << "Enter the number to insert before the smallest element: ";
    std::cin >> x;
    // access function for task 2
    list.insertBeforeSmallest(x);
    
    // access function for task 1
    list.removeLargestAndSmallest();
    std::cout << "\nTask 1: list after removing largest and smallest elements:" << std::endl;
        list.printList();
    
    // access function for task 3
    list.calculateSumAndCount();
    
    cout << "\n";
    return 0;
}
